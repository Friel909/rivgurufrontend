{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Programs\\\\MERN Stack Training\\\\UMMMMMMMMMMMMMMM IDK\\\\pages\\\\regist.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: 'inline-block'\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n}\n\nconst classes = useStyles();\nconst [activeStep, setActiveStep] = React.useState(0);\nconst [completed, setCompleted] = React.useState({});\nconst steps = getSteps();\n\nconst totalSteps = () => {\n  return steps.length;\n};\n\nconst completedSteps = () => {\n  return Object.keys(completed).length;\n};\n\nconst isLastStep = () => {\n  return activeStep === totalSteps() - 1;\n};\n\nconst allStepsCompleted = () => {\n  return completedSteps() === totalSteps();\n};\n\nconst handleNext = () => {\n  const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n  // find the first step that has been completed\n  steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;\n  setActiveStep(newActiveStep);\n};\n\nconst handleBack = () => {\n  setActiveStep(prevActiveStep => prevActiveStep - 1);\n};\n\nconst handleStep = step => () => {\n  setActiveStep(step);\n};\n\nconst handleComplete = () => {\n  const newCompleted = completed;\n  newCompleted[activeStep] = true;\n  setCompleted(newCompleted);\n  handleNext();\n};\n\nconst handleReset = () => {\n  setActiveStep(0);\n  setCompleted({});\n};\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-title\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Let's Get Started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \" col-lg-6 col-md-12\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \" Enter your Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-basic\",\n              fullWidth: true,\n              label: \"Email\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              disabled: activeStep === 0,\n              onClick: handleBack,\n              className: classes.button,\n              children: \"Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: handleNext,\n              className: classes.button,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), activeStep !== steps.length && (completed[activeStep] ? /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              className: classes.completed,\n              children: [\"Step \", activeStep + 1, \" already completed\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: handleComplete,\n              children: completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-lg-6 col-md-12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"about-image text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"/images/about-img10.png\",\n                alt: \"image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this);\n\n    case 1:\n      return 'Step 2: What is an ad group anyways?';\n\n    case 2:\n      return 'Step 3: This is the bit I really care about!';\n\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function HorizontalNonLinearStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState({});\n  const steps = getSteps();\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n    // find the first step that has been completed\n    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      nonLinear: true,\n      activeStep: activeStep,\n      children: steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepButton, {\n          onClick: handleStep(index),\n          completed: completed[index],\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)\n      }, label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: allStepsCompleted() ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.instructions,\n          children: \"All steps completed - you're finished\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.instructions,\n          children: getStepContent(activeStep)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["D:/Programs/MERN Stack Training/UMMMMMMMMMMMMMMM IDK/pages/regist.js"],"names":["React","makeStyles","Stepper","Step","StepButton","Button","Typography","TextField","useStyles","theme","root","width","button","marginRight","spacing","completed","display","instructions","marginTop","marginBottom","getSteps","classes","activeStep","setActiveStep","useState","setCompleted","steps","totalSteps","length","completedSteps","Object","keys","isLastStep","allStepsCompleted","handleNext","newActiveStep","findIndex","step","i","handleBack","prevActiveStep","handleStep","handleComplete","newCompleted","handleReset","getStepContent","HorizontalNonLinearStepper","map","label","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepButton from '@material-ui/core/StepButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  completed: {\r\n    display: 'inline-block',\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction getSteps() {\r\n  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];\r\n}\r\n\r\n\r\nconst classes = useStyles();\r\nconst [activeStep, setActiveStep] = React.useState(0);\r\nconst [completed, setCompleted] = React.useState({});\r\nconst steps = getSteps();\r\n\r\nconst totalSteps = () => {\r\n  return steps.length;\r\n};\r\n\r\nconst completedSteps = () => {\r\n  return Object.keys(completed).length;\r\n};\r\n\r\nconst isLastStep = () => {\r\n  return activeStep === totalSteps() - 1;\r\n};\r\n\r\nconst allStepsCompleted = () => {\r\n  return completedSteps() === totalSteps();\r\n};\r\n\r\nconst handleNext = () => {\r\n  const newActiveStep =\r\n    isLastStep() && !allStepsCompleted()\r\n      ? // It's the last step, but not all steps have been completed,\r\n        // find the first step that has been completed\r\n        steps.findIndex((step, i) => !(i in completed))\r\n      : activeStep + 1;\r\n  setActiveStep(newActiveStep);\r\n};\r\n\r\nconst handleBack = () => {\r\n  setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n};\r\n\r\nconst handleStep = (step) => () => {\r\n  setActiveStep(step);\r\n};\r\n\r\nconst handleComplete = () => {\r\n  const newCompleted = completed;\r\n  newCompleted[activeStep] = true;\r\n  setCompleted(newCompleted);\r\n  handleNext();\r\n};\r\n\r\nconst handleReset = () => {\r\n  setActiveStep(0);\r\n  setCompleted({});\r\n};\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return (\r\n      <div className=\"container\">\r\n        <div className=\"section-title\">\r\n            <h2>Let's Get Started</h2>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\" col-lg-6 col-md-12\">\r\n            <h4> Enter your Email</h4>\r\n            <TextField id=\"outlined-basic\"  fullWidth label=\"Email\" variant=\"outlined\" />\r\n            <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                Back\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleNext}\r\n                className={classes.button}\r\n              >\r\n                Next\r\n              </Button>\r\n              {activeStep !== steps.length &&\r\n                (completed[activeStep] ? (\r\n                  <Typography variant=\"caption\" className={classes.completed}>\r\n                    Step {activeStep + 1} already completed\r\n                  </Typography>\r\n                ) : (\r\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleComplete}>\r\n                    {completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'}\r\n                  </Button>\r\n              ))}\r\n          </div>\r\n\r\n          <div className=\"col-lg-6 col-md-12\">\r\n            <div className=\"about-image text-center\">\r\n              <img src=\"/images/about-img10.png\" alt=\"image\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n    case 1:\r\n      return 'Step 2: What is an ad group anyways?';\r\n    case 2:\r\n      return 'Step 3: This is the bit I really care about!';\r\n    default:\r\n      return 'Unknown step';\r\n  }\r\n}\r\n\r\nexport default function HorizontalNonLinearStepper() {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [completed, setCompleted] = React.useState({});\r\n  const steps = getSteps();\r\n\r\n  const totalSteps = () => {\r\n    return steps.length;\r\n  };\r\n\r\n  const completedSteps = () => {\r\n    return Object.keys(completed).length;\r\n  };\r\n\r\n  const isLastStep = () => {\r\n    return activeStep === totalSteps() - 1;\r\n  };\r\n\r\n  const allStepsCompleted = () => {\r\n    return completedSteps() === totalSteps();\r\n  };\r\n\r\n  const handleNext = () => {\r\n    const newActiveStep =\r\n      isLastStep() && !allStepsCompleted()\r\n        ? // It's the last step, but not all steps have been completed,\r\n          // find the first step that has been completed\r\n          steps.findIndex((step, i) => !(i in completed))\r\n        : activeStep + 1;\r\n    setActiveStep(newActiveStep);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleStep = (step) => () => {\r\n    setActiveStep(step);\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    const newCompleted = completed;\r\n    newCompleted[activeStep] = true;\r\n    setCompleted(newCompleted);\r\n    handleNext();\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n    setCompleted({});\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper nonLinear activeStep={activeStep}>\r\n        {steps.map((label, index) => (\r\n          <Step key={label}>\r\n            <StepButton onClick={handleStep(index)} completed={completed[index]}>\r\n              {label}\r\n            </StepButton>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      <div>\r\n        {allStepsCompleted() ? (\r\n          <div>\r\n            <Typography className={classes.instructions}>\r\n              All steps completed - you&apos;re finished\r\n            </Typography>\r\n            <Button onClick={handleReset}>Reset</Button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}